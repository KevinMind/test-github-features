name: 'Docker Build'
description: 'Builds docker image'
inputs:
  push:
    required: true
    description: "Build and push image to registry (cannot be used together with load)"
    default: "false"
  password:
    required: false
    description: "Password for the registry"
  username:
    required: false
    description: "Username for the registry"
  node_env:
    required: false
    description: "Node environment"
    default: "production"
  latest:
    required: false
    description: "Tag latest version"
    default: "false"

outputs:
  tags:
    description: "The Docker tags for the image"
    value: ${{ steps.meta.outputs.tags }}
  version:
    description: "The version for the image"
    value: ${{ steps.meta.outputs.version }}
  image:
    description: "The Docker image"
    value: ${{ steps.image.outputs.image }}
  image_version:
    description: "Combines image and version to a valid image tag"
    value: ${{ steps.image.outputs.image }}:${{ steps.meta.outputs.version }}

runs:
  using: "composite"
  steps:
    # Setup docker to build for multiple architectures
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        version: latest
        buildkitd-flags: --debug

    # Login to a registry to push the image
    - name: Login to Container Registry
      # Only login if we are pushing the image
      if: ${{ inputs.push == 'true' }}
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - name: Docker Image
      id: image
      shell: bash
      run: |
        registry="ghcr.io"
        repository="${{ github.repository }}"
        image="$registry/$repository"

        echo "registry=$registry" >> $GITHUB_OUTPUT
        echo "repository=$repository" >> $GITHUB_OUTPUT
        echo "image=$image" >> $GITHUB_OUTPUT

        cat $GITHUB_OUTPUT

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.image.outputs.image }}
        flavor: |
          suffix=-next,onlatest=true
          latest=${{ inputs.latest == 'true' }}
        tags: |
          type=ref,event=pr
          type=ref,event=branch
          type=ref,event=tag

    - name: Docker tag
      id: tag
      shell: bash
      run: |
        # Extract metadata output json
        cat <<EOF > meta.json
        ${{ steps.meta.outputs.json }}
        EOF

        tag=$(cat meta.json | jq -r '.tags[0]')
        tag_cache="$tag-cache"

        echo "tag=$tag" >> $GITHUB_OUTPUT
        echo "tag_cache=$tag_cache" >> $GITHUB_OUTPUT

        cat $GITHUB_OUTPUT

    - name: Build Image
      id: build
      uses: docker/bake-action@v4
      env:
        DOCKER_TAG: ${{ steps.tag.outputs.tag }}
      with:
        targets: app
        push: ${{ inputs.push }}
        load: ${{ inputs.push == 'false' }}
        set: |
          *.cache-from=type=registry,ref=${{ steps.tag.outputs.tag_cache }}
          *.cache-to=type=registry,ref=${{ steps.tag.outputs.tag_cache }},mode=max,compression-level=9,force-compression=true,ignore-error=true
